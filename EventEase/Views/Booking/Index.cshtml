@model IEnumerable<EventEase.Models.Booking>

@{
    ViewData["Title"] = "EventEase Booking - Bookings";
}

<div class="d-flex justify-content-between align-items-center my-4">
    <h1 class="h3 text-primary mb-0">Bookings</h1>
    <a asp-action="Create" class="btn btn-success">+ Create New Booking</a>
</div>

<!-- TempData Alerts -->
@if (TempData["Message"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Message"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Search Box -->
<div class="card mb-4 shadow-sm border-0">
    <div class="card-header bg-light">
        <h5 class="mb-0">Search Bookings</h5>
    </div>
    <div class="card-body">
        <form asp-action="Search" method="get">
            <div class="input-group">
                <input type="text" name="searchTerm" class="form-control" placeholder="Search by Booking ID or Event Name" />
                <button type="submit" class="btn btn-outline-primary">Search</button>
                <a asp-action="Index" class="btn btn-outline-secondary">Reset</a>
            </div>
        </form>
    </div>
</div>

<!-- Booking Table -->
<div class="table-responsive">
    <table class="table table-hover align-middle">
        <thead class="table-primary">
            <tr>
                <th>Booking ID</th>
                <th>Event</th>
                <th>Venue</th>
                <th>Event Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.BookingId</td>
                    <td>@item.Event?.EventName</td>
                    <td>@item.Venue?.VenueName</td>
                    <td>@item.BookingDate.ToString("MMMM dd, yyyy")</td>
                    <td>
                        @if (string.IsNullOrEmpty(item.Status))
                        {
                            <span class="badge bg-warning text-dark">Pending</span>
                        }
                        else
                        {
                            <span class="badge @GetStatusBadgeClass(item.Status)">@item.Status</span>
                        }
                    </td>
                    <td>
                        <div class="btn-group">
                            <a asp-action="Details" asp-route-id="@item.BookingId" class="btn btn-sm btn-outline-info">Details</a>
                            <a asp-action="Edit" asp-route-id="@item.BookingId" class="btn btn-sm btn-outline-warning">Edit</a>
                            <form asp-action="Delete" asp-route-id="@item.BookingId" method="post" style="display:inline;" onsubmit="return confirm('Are you sure you want to delete this booking?');">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                            </form>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@functions {
    string GetStatusBadgeClass(string status)
    {
        switch (status.ToLower())
        {
            case "active":
                return "bg-success";
            case "cancelled":
                return "bg-danger";
            case "completed":
                return "bg-primary";
            default:
                return "bg-secondary";
        }
    }
}
